import "dotenv/config";
import { Telegraf, Markup } from "telegraf";
import { setIntervalAsync } from "set-interval-async/dynamic/index.js";
import {
  getGoodInfo,
  firstMessage,
  getData,
  allGoodsMessage,
} from "./utils.js";

const delay = 100000;
const allGoods = [];

const telegramBotToken = process.env.BOT_TOKEN;
const bot = new Telegraf(telegramBotToken); //—Å—é–¥–∞ –ø–æ–º–µ—â–∞–µ—Ç—Å—è —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–ª botFather

bot.start((ctx) => {
  ctx.reply(
    "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª",
    Markup.keyboard(["üîç –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ"])
      .oneTime()
      .resize()
  );
});

bot.hears("üîç –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ", (ctx) =>
  ctx.replyWithMarkdown(allGoodsMessage(allGoods))
);

bot.on("text", async (ctx) => {
  const urls = ctx.message.text.split(" ");

  allGoods.length = 0;

  try {
    for (const url of urls) {
      const good = await getGoodInfo(url).then((el) => getData(el));

      allGoods.push(good);
    }

    const message = allGoods.reduce((acc, { title, price }) => {
      const m = firstMessage(title, price);

      return acc + m;
    }, "");

    ctx.replyWithMarkdown(
      allGoods.length
        ? message +
            "–ú—ã –±—É–¥–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Ü–µ–Ω—É –ø–æ —ç—Ç–∏–º –ø–æ–∑–∏—Ü–∏—è–º. –ï—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏—Ç—Å—è, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
        : "–ù–µ –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ"
    );

    setIntervalAsync(async () => {
      const newGoodsInfo = await Promise.all(
        urls.map(async (url) => {
          const good = await getGoodInfo(url).then((el) => getData(el));
          return good;
        })
      );

      newGoodsInfo.forEach(({ title, price }, index) => {
        if (price === allGoods[index].price) {
          ctx.replyWithMarkdown(`–¶–µ–Ω–∞ –Ω–∞ *${title}* –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å. `);
        } else {
          ctx.replyWithMarkdown(
            `üß°üß°üß° –¶–µ–Ω–∞ –Ω–∞ *${title}* –∏–∑–º–µ–Ω–∏–ª–∞—Å—å! –°—Å—ã–ª–∫–∞: ${urls[index]}`
          );
          allGoods[index].price = price;
        }
      });
    }, delay);
  } catch (e) {
    ctx.reply(e);
  }
});

bot.launch(); // –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
